apiVersion: apps/v1
kind: Deployment
metadata:
  {{- with (default .Values.global.annotations .Values.server.annotations) }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  name: keymanager-{{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: keymanager
      version: {{ .Release.Name }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: keymanager
        version: {{ .Release.Name }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-type
                operator: In
                values:
                - keymanager-ng
      containers:
      - env:
        - name: CRIPTA__SECRETS__KMS_CONFIG__KEY_ID
          valueFrom:
            secretKeyRef:
              name: keymanager-secrets-{{ .Release.Name }}
              key: CRIPTA__SECRETS__KMS_CONFIG__KEY_ID
        - name: CRIPTA__SECRETS__KMS_CONFIG__REGION
          valueFrom:
            secretKeyRef:
              name: keymanager-secrets-{{ .Release.Name }}
              key: CRIPTA__SECRETS__KMS_CONFIG__REGION
        image: {{ .Values.server.image }}
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/bash
              - -c
              - pkill -15 node
        name: keymanager
        ports:
        - containerPort: 5000
          name: http
          protocol: TCP
        resources:
          requests:
            cpu: 400m
            memory: 400Mi
        securityContext:
          privileged: false
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /local/config/production.toml
          name: keymanager-config
          subPath: production.toml
      dnsConfig:
        options:
        - name: ndots
          value: "1"
        - name: single-request-reopen
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: keymanager-role
      serviceAccountName: keymanager-role
      terminationGracePeriodSeconds: 90
      volumes:
      - configMap:
          defaultMode: 420
          name: keymanager-config-{{ .Release.Name }}
        name: keymanager-config
